---
init:
- ps: |
    # Parse commit message, set env variable conditional
    if ($env:APPVEYOR_REPO_COMMIT_MESSAGE -match '\[release\]') { 
        $env:deploy_github_releases = "true" 
    } else { 
        $env:deploy_github_releases = "false" 
    }
    echo "deploy_github_releases: $env:deploy_github_releases"

---
init:
- ps: |
    # Enhance build version with timestamp
    $meta= Get-Date -Format "yyyyMMddHHmmss"
    $env:version_meta="$meta"
    Update-AppveyorBuild -Version "$ENV:APPVEYOR_BUILD_VERSION+$meta
    # ------------------------------------
    # $meta, $env:version_meta: timestamp
---
install:
- ps: |
    # prepare Git credentials
    git config --global credential.helper store
    Add-Content "$env:USERPROFILE\\.git-credentials" "https://$($env:github_access_token_appveyor):x-oauth-basic@github.com`n"
    git config --global user.email "$env:github_user_email_appveyor"
    git config --global user.name "$env:github_user_name_appveyor"
---
install:
# checkout complete branch
- git checkout %APPVEYOR_REPO_BRANCH%
---
install:
- ps: |
    #Extract version format
    $versionFormat = $settings.versionFormat
    echo "versionFormat: $versionFormat"
    if(-not ($versionFormat -match "^(\d+\.\d+)(\..*)$")) {
        $env:APPVEYOR_SKIP_FINALIZE_ON_EXIT="true"
        Write-Error -Message "`nERROR: Unsupported version format!" -ErrorAction Stop
        Exit-AppveyorBuild
    }
    $currentVersion = $Matches[1]
    $currentVersionSegments = $currentVersion.Split(".")
    echo "Current version: ""$currentVersion.*"" / $($currentVersionSegments.Count+1) parts"
    # ----------------------------------------------
    # $currentVersion: Major.Minor (string)
    # $currentVersionSegments: all version segments (array)
---
script:
- ps: |
    # Exit immediately
    $env:APPVEYOR_SKIP_FINALIZE_ON_EXIT="true"
    Write-Error -Message "`nERROR: Error!" -ErrorAction Stop
    Exit-AppveyorBuild

---
install:
- ps: |
    # Get new version from file
    $versionPattern = "^(\s*\#\s*)(?<version>\d+\.\d+(\.\d+)?)"
    $versiontxt=Get-Content -path "$env:VersionFile" -TotalCount 1
    if(-not ($versiontxt -match $versionPattern)) {
        $env:APPVEYOR_SKIP_FINALIZE_ON_EXIT="true"
        Write-Error -Message "`nERROR: Unsupported version format!" -ErrorAction Stop
        Exit-AppveyorBuild
    }
    $versiontxt = $Matches["version"]
    $newVersionSegments = $versiontxt.Split(".")
    echo "New version: ""$versiontxt.*"" / $($newVersionSegments.Count+1) parts"
    if($newVersionSegments.Count+1 -ne 3) {
        $env:APPVEYOR_SKIP_FINALIZE_ON_EXIT="true"
        Write-Error -Message "`nERROR: Unsupported version format!" -ErrorAction Stop
        Exit-AppveyorBuild
    }
    $buildVersion = $versiontxt
    $env:buildVersion = $versiontxt
---
install:
- ps: |
    # Check if new version is greater 
    $reset_build = "false"
    $patchNumber = $Env:APPVEYOR_BUILD_NUMBER 
    if ($newVersionSegments[0] -gt $currentVersionSegments[0]) {
        $reset_build="true"
        $patchNumber=0
    } elseif (($newVersionSegments[0] -eq $currentVersionSegments[0]) -and ($newVersionSegments[1] -gt $currentVersionSegments[1])) {
        $reset_build="true"
        $patchNumber=0
    }
    $env:patchNumber = $patchNumber 
    echo "Reset patch number: $reset_build"
---
install:
- ps: |
    # Extract ChangeLog
    $changeLog=Get-Content -path "$env:VersionFile" | select -Skip 1
    echo "ChangeLog:`n$changeLog"
---
# manual build and pack
build_script:
- ps: '# --- Build script --- MULTICOMMAND! DO NOT EDIT on web UI'
- cmd: 'echo Version: %APPVEYOR_BUILD_VERSION%'
- cmd: msbuild "%SolutionFile%" -t:restore /verbosity:minimal
- cmd: msbuild "%SolutionFile%" /property:Configuration=%CONFIGURATION% /verbosity:minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll" /p:GeneratePackageOnBuild=false /consoleloggerparameters:Summary /p:WarningLevel=0
- cmd: rem dotnet build "%SolutionFile%" -c %CONFIGURATION% /verbosity:minimal /p:GeneratePackageOnBuild=false
after_test:
- ps: '# --- After tests script --- MULTICOMMAND! DO NOT EDIT on web UI'
- cmd: dotnet pack "%SolutionFile%" -c %CONFIGURATION% --no-build --no-restore -o packages /p:Version=%APPVEYOR_BUILD_VERSION%
artifacts:
- path: packages/*.nupkg
  name: NuGet.org

---
before_build:
- nuget restore %SolutionFile%
build:
  project: $(SolutionFile)
  verbosity: minimal
